import express from "express";
import axios from "axios";
import dotenv from "dotenv";

// üí° –ö–†–û–ö 1: –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ú–Ü–ù–ù–ò–• –ó .env
dotenv.config();

// üí° –ö–†–û–ö 2: –ó–ß–ò–¢–£–í–ê–ù–ù–Ø –ó–ú–Ü–ù–ù–ò–• –ü–Ü–°–õ–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø
const apiKey = process.env.AI_API_KEY;
const apiUrl = process.env.AI_API_URL;

const app = express();
// üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –î–õ–Ø RENDER: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ PORT, —è–∫—â–æ –≤–æ–Ω–∞ —î
// Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–º—ñ–Ω–Ω—É process.env.PORT, —è–∫—É –º–∏ –º–∞—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
const port = process.env.PORT || 3001;

// --- Middlewares ---
app.use(express.json());

// 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS: –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
    res.json({ 
        status: "OK", 
        message: "AI Proxy Server –ø—Ä–∞—Ü—é—î!",
        endpoint: "/api/ai-query",
        method: "POST"
    });
});
app.get("/", (req, res) => {
  res.json({
    status: "OK",
    message: "AI Proxy Server –ø—Ä–∞—Ü—é—î!",
    endpoint: "/api/ai-query",
    method: "POST",
  });
});

// --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –®–Ü ---
app.post("/api/ai-query", async (req, res) => {
  const { prompt } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: '–ü–æ–ª–µ "prompt" —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º.' });
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
  if (!apiKey || !apiUrl) {
    console.error(
      "AI_API_KEY –∞–±–æ AI_API_URL –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env."
    );
    return res
      .status(500)
      .json({
        success: false,
        error: "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø–æ–≤–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.",
      });
  }

  try {
    const geminiBody = {
      model: "gemini-2.5-flash",
      contents: [{ role: "user", parts: [{ text: prompt }] }],
    };

    const finalUrl = `${apiUrl}?key=${apiKey}`;

    const aiResponse = await axios.post(finalUrl, geminiBody, {
      headers: {
        "Content-Type": "application/json",
      },
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini
    const aiText = aiResponse.data.candidates[0].content.parts[0].text;

    res.json({ success: true, response: aiText });
  } catch (error) {
    console.error(
      "error API aI:",
      error.response ? error.response.data : error.message
    );
    res.status(500).json({
      success: false,
      error: "Error processing request to AI",
      details: error.response ? error.response.data : error.message,
    });
  }
});

// --- –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ ---
app.listen(port, () => {
  // –¢–µ–ø–µ—Ä log –ø–æ–∫–∞–∂–µ –ø–æ—Ä—Ç, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Render (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10000)
  console.log(`ai server started on http://localhost:${port}`);
});
